{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN7fgY0ypX+dNX+w4vuB+l8"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from sklearn.neighbors import NearestCentroid\n","\n","# Database: Gerbang logika AND\n","# x = Data, Y = Target\n","x = [[0, 0], [0, 1], [1, 0], [1, 1], [1, 2], [2, 1], [2, 2], [2, 3], [3, 2], [3, 3]]\n","y = [0, 0, 0, 1, 2, 2, 1, 3, 2, 3]\n","\n","# Training and Classify\n","clf = NearestCentroid() \n","clf.fit(x, y) \n","\n","# Prediksi\n","print (\"Logika AND Metode K. Nearest Neighbors (KKN)\")\n","print (\"Logika = Prediksi\") \n","print (\"0 0 = \", clf.predict([[0, 0]])) \n","print (\"0 1 = \", clf.predict([[0, 1]])) \n","print (\"1 0 = \", clf.predict([[1, 0]])) \n","print (\"1 1 = \", clf.predict([[1, 1]]))\n","print (\"1 2 = \", clf.predict([[1, 2]]))\n","print (\"2 1 = \", clf.predict([[2, 1]]))\n","print (\"2 2 = \", clf.predict([[2, 2]]))\n","print (\"2 3 = \", clf.predict([[2, 3]]))\n","print (\"3 2 = \", clf.predict([[3, 2]]))\n","print (\"3 3 = \", clf.predict([[3, 3]]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MKj_t93VWWEu","executionInfo":{"status":"ok","timestamp":1669289053039,"user_tz":-420,"elapsed":348,"user":{"displayName":"Esmeralda Sutiani","userId":"02419804181787351454"}},"outputId":"905d49fc-2e2e-4300-b05a-a2877fe0f2bb"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Logika AND Metode K. Nearest Neighbors (KKN)\n","Logika = Prediksi\n","0 0 =  [0]\n","0 1 =  [0]\n","1 0 =  [0]\n","1 1 =  [1]\n","1 2 =  [1]\n","2 1 =  [2]\n","2 2 =  [2]\n","2 3 =  [3]\n","3 2 =  [2]\n","3 3 =  [3]\n"]}]},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"g8uWOCGZTgEe","executionInfo":{"status":"ok","timestamp":1669289655963,"user_tz":-420,"elapsed":390,"user":{"displayName":"Esmeralda Sutiani","userId":"02419804181787351454"}},"outputId":"4edf92dd-3a55-4e92-aacc-00d9fc141305"},"outputs":[{"output_type":"stream","name":"stdout","text":["Logika AND Metode Desicion Tree\n","0 1 =  [0]\n","1 2 =  [0]\n","2 3 =  [0]\n","3 4 =  [1]\n","4 5 =  [2]\n","5 6 =  [2]\n","6 7 =  [1]\n","7 8 =  [3]\n","8 9 =  [2]\n","9 2  =  [1]\n"]}],"source":["from sklearn import tree\n","\n","# Database: Gerbang logika AND\n","# x = Data, Y = Target\n","x = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9],[9, 10]]\n","y = [0, 0, 0, 1, 2, 2, 1, 3, 2, 3]\n","\n","# Training and Classify\n","clf = tree.DecisionTreeClassifier() \n","clf = clf. fit(x, y) \n","\n","# Prediksi\n","print (\"Logika AND Metode Desicion Tree\") \n","print (\"0 1 = \", clf.predict([[0, 1]])) \n","print (\"1 2 = \", clf.predict([[1, 2]])) \n","print (\"2 3 = \", clf.predict([[2, 3]])) \n","print (\"3 4 = \", clf.predict([[3, 4]]))\n","print (\"4 5 = \", clf.predict([[4, 5]]))\n","print (\"5 6 = \", clf.predict([[5, 6]]))\n","print (\"6 7 = \", clf.predict([[6, 7]]))\n","print (\"7 8 = \", clf.predict([[7, 8]]))\n","print (\"8 9 = \", clf.predict([[8, 9]]))\n","print (\"9 2  = \", clf.predict([[9, 2]]))"]}]}